var searchIndex = JSON.parse('{\
"rust_gpu_sdf":{"doc":"","t":[5,0,0,0,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,12,11,11,11,11,0,11,0,11,0,11,0,11,11,11,0,0,11,12,10,11,0,0,0,0,0,12,0,0,0,0,11,0,11,11,0,11,0,6,6,6,3,11,11,12,11,11,11,11,11,11,6,3,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,6,3,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,8,8,10,0,10,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,6,6,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["default","markers","operators","signed_distance_field","Approx","Exact","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Operator","SignedDistanceOperator","_phantom","borrow","borrow_mut","clone","clone_into","composite","default","displace","distance","elongate","eq","extrude","fmt","from","hash","hollow","intersection","into","op","operator","partial_cmp","reflect","repeat","rotate","round","scale","sdf","smooth_intersection","smooth_subtraction","smooth_union","subtraction","to_owned","translate","try_from","try_into","twist","type_id","union","Onion","Transform","Displace","DisplaceOp","borrow","borrow_mut","displace","from","into","operator","try_from","try_into","type_id","Elongate","ElongateOp","_phantom","borrow","borrow_mut","clone","clone_into","default","eq","extent","fmt","from","into","operator","operator","to_owned","try_from","try_into","type_id","ExtrudeDist","ExtrudeDistOp","ExtrudeInfinite","ExtrudeInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","dir","dir","dist","eq","eq","fmt","fmt","from","from","into","into","operator","operator","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Hollow","HollowOp","borrow","borrow_mut","clone","clone_into","default","depth","eq","fmt","from","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Intersection","IntersectionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","Reflect","ReflectOp","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","to_owned","try_from","try_into","type_id","RepeatCount","RepeatCountOp","RepeatInfinite","RepeatInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","default","default","eq","eq","fmt","fmt","from","from","into","into","operator","operator","period","period","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Rotate","RotateOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","rotation","to_owned","try_from","try_into","type_id","Round","RoundOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","partial_cmp","radius","to_owned","try_from","try_into","type_id","Scale","ScaleOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","SmoothIntersection","SmoothIntersectionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","SmoothSubtraction","SmoothSubtractionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","SmoothUnion","SmoothUnionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","Subtraction","SubtractionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","Translate","TranslateOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","to_owned","translation","try_from","try_into","type_id","Twist","TwistOp","axis_pos","axis_rot","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","operator","to_owned","try_from","try_into","type_id","Union","UnionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","to_owned","try_from","try_into","type_id","SignedDistanceField","SignedDistanceNormal","distance","metrics","normal","shapes","chebyshev","euclidean","taxicab","ChebyshevMetric","borrow","borrow_mut","clone","clone_into","cmp","default","distance","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","EuclideanMetric","borrow","borrow_mut","clone","clone_into","cmp","default","distance","eq","fmt","from","hash","into","normal","partial_cmp","to_owned","try_from","try_into","type_id","TaxicabMetric","borrow","borrow_mut","clone","clone_into","cmp","default","distance","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","composite","octahedron","plane","torus","Capsule","Cube","Line","Point","Sphere","Octahedron","borrow","borrow_mut","clone","clone_into","default","distance","eq","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id","Plane","borrow","borrow_mut","clone","clone_into","default","distance","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Torus","borrow","borrow_mut","clone","clone_into","default","distance","eq","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["rust_gpu_sdf","","","","rust_gpu_sdf::markers","","","","","","","","","","","","","","","","rust_gpu_sdf::operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::composite","","rust_gpu_sdf::operators::displace","","","","","","","","","","","rust_gpu_sdf::operators::elongate","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::extrude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::hollow","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::intersection","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::reflect","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::repeat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::rotate","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::round","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::scale","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_intersection","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_subtraction","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_union","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::subtraction","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::translate","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::twist","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::union","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field","","","","","","rust_gpu_sdf::signed_distance_field::metrics","","","rust_gpu_sdf::signed_distance_field::metrics::chebyshev","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::euclidean","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::taxicab","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes","","","","rust_gpu_sdf::signed_distance_field::shapes::composite","","","","","rust_gpu_sdf::signed_distance_field::shapes::octahedron","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::plane","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::torus","","","","","","","","","","","","","","",""],"d":["Free-standing Default::default() invocation","Shared marker types.","Types that modify a distance field.","Types that describe signed distance fields.","Marker type for approximate operations","Marker type for exact operations","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Applies a <code>SignedDistanceOperator</code> to a <code>SignedDistanceField</code>.","Modifies the input / output of a <code>SignedDistanceField</code>.","","","","","","Operators composed from other operators.","","Displace the output of a distance field using the output …","","Extrude a shape along its axes, preserving exterior …","","Extrude a shape along an arbitrary axis, preserving …","","Returns the argument unchanged.","","Convert a solid shape into a hollow one with an infinitely …","Compute the boolean intersection of two distance fields.","Calls <code>U::from(self)</code>.","","","","Reflect a distance field about an arbitrary axis.","Operators for repeating distance fields across a domain.","Rotate a distance field.","Add an arbitrary radius to a distance field.","Uniformly scale a distance field.","","Compute the blended boolean intersection of two distance …","Compute the blended boolean subtraction of two distance …","Compute the blended boolean union of two distance fields.","Compute the boolean subtraction of two distance fields.","","Apply a positional translation to a distance field.","","","Twist a distance field around an arbitrary axis.","","Compute the boolean union of two distance fields.","Converts a solid shape into a hollow one with the given …","Translate, rotate, and scale the wrapped SDF.","Displace the output of a distance field using the output …","Displace the output of a distance field using the output …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Extrude a shape along its axes, preserving exterior …","Extrude a shape along its axes, preserving exterior …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Extrude a shape by an arbitrary distance along an …","Extrude a shape by an arbitrary distance along an …","Extrude a shape infinitely along an arbitrary axis.","Extrude a shape infinitely along an arbitrary axis.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Convert a solid shape into a hollow one with an infinitely …","Convert a solid shape into a hollow one with an infinitely …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Compute the boolean intersection of two distance fields.","Compute the boolean intersection of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Reflect a distance field about an arbitrary axis.","Reflect a distance field about an arbitrary axis.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Repeat a distance field a set number of times in one or …","Repeat a distance field a set number of times in one or …","Repeat a distance field infinitely in one or more axes.","Repeat a distance field infinitely in one or more axes.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Rotate a distance field.","Rotate a distance field.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Add an arbitrary radius to a distance field.","Add an arbitrary radius to a distance field.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Uniformly scale a distance field.","Uniformly scale a distance field.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Compute the blended boolean intersection of two distance …","Compute the blended boolean intersection of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the blended boolean subtraction of two distance …","Compute the blended boolean subtraction of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the blended boolean union of two distance fields.","Compute the blended boolean union of two distance fields.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the boolean subtraction of two distance fields.","Compute the boolean subtraction of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Apply a positional translation to a distance field.","Apply a positional translation to a distance field.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Twist a distance field around an arbitrary axis.","Twist a distance field around an arbitrary axis.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Compute the boolean union of two distance fields.","Compute the boolean union of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Describes a shape in terms of distance to the nearest …","Computes the normal at the nearest point on the surface of …","","Distance metrics.","","Distance field shapes.","Chebyshev distance metric.","Euclidean distance metric.","Taxicab distance metric.","Chebyshev distance metric.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Euclidian distance metric.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Taxicab distance metric.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Shapes composed from other shapes.","An octahedron.","A plane.","A torus.","A capsule.","A cube.","An infinitely thin line. Not very useful on its own; …","An infinitely small point. Not very useful on its own; …","A sphere.","An octahedron.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A plane.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A torus.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,19,20,19,20,19,20,19,20,19,20,19,20,19,20,0,0,5,5,5,5,5,0,5,0,5,0,5,0,5,5,5,0,0,5,5,45,5,0,0,0,0,0,5,0,0,0,0,5,0,5,5,0,5,0,0,0,0,0,16,16,16,16,16,16,16,16,16,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,21,22,21,22,21,22,21,22,21,22,21,22,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,26,27,26,27,26,27,26,27,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,46,0,47,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44],"f":[[[],1],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,[[]],[[]],[[[5,[4]]],[[5,[4]]]],[[]],0,[[],5],0,[5,6],0,[[[5,[7]],5],8],0,[[[5,[9]],10],11],[[]],[[[5,[12]]]],0,0,[[]],0,[[],6],[[[5,[13]],5],[[15,[14]]]],0,0,0,0,0,0,0,0,0,0,[[]],0,[[],2],[[],2],0,[[],3],0,0,0,0,0,[[]],[[]],0,[[]],[[]],[[16,17],6],[[],2],[[],2],[[],3],0,0,0,[[]],[[]],[18,18],[[]],[[],18],[[18,18],8],0,[[[18,[9]],10],11],[[]],[[]],[[[18,[19]],17],6],[[[18,[20]],17],6],[[]],[[],2],[[],2],[[],3],0,0,0,0,[[]],[[]],[[]],[[]],[21,21],[22,22],[[]],[[]],[[],21],[[],22],0,0,0,[[21,21],8],[[22,22],8],[[21,10],11],[[22,10],11],[[]],[[]],[[]],[[]],[[21,17],6],[[22,17],6],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,[[]],[[]],[23,23],[[]],[[],23],0,[[23,23],8],[[23,10],11],[[]],[[]],[[23,17],6],[[23,23],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[24,24],[[]],[[24,24],14],[[],24],[[24,24],8],[[24,10],11],[[]],[24],[[]],[[24,17],6],[[24,24],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,0,[[]],[[]],[25,25],[[]],[[],25],[[25,25],8],[[25,10],11],[[]],[[]],[[25,17],6],[[]],[[],2],[[],2],[[],3],0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],0,[[],26],[[],27],[[26,26],8],[[27,27],8],[[26,10],11],[[27,10],11],[[]],[[]],[[]],[[]],[[26,17],6],[[27,17],6],0,0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,[[]],[[]],[28,28],[[]],[[],28],[[28,28],8],[[28,10],11],[[]],[[]],[[28,17],6],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[29,29],[[]],[[],29],[[29,29],8],[[29,10],11],[[]],[[]],[[29,17],6],[[29,29],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[30,30],[[]],[[],30],[[30,30],8],[[30,10],11],[[]],[[]],[[30,17],6],[[30,30],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[31,31],[[]],[[],31],[[31,31],8],[[31,10],11],[[]],[[]],0,[[31,17],6],[[31,31],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[32,32],[[]],[[],32],[[32,32],8],[[32,10],11],[[]],[[]],0,[[32,17],6],[[32,32],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[33,33],[[]],[[],33],[[33,33],8],[[33,10],11],[[]],[[]],0,[[33,17],6],[[33,33],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[34,34],[[]],[[34,34],14],[[],34],[[34,34],8],[[34,10],11],[[]],[34],[[]],[[34,17],6],[[34,34],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[[[35,[4]]],[[35,[4]]]],[[]],[[[35,[36]],35],14],[[],[[35,[1]]]],[[[35,[7]],35],8],[[[35,[9]],10],11],[[]],[[[35,[12]]]],[[]],[[[35,[17]],17],6],[[[35,[13]],35],[[15,[14]]]],[[]],0,[[],2],[[],2],[[],3],0,0,0,0,[[]],[[]],[37,37],[[]],[[],37],[[37,37],8],[[37,10],11],[[]],[[]],0,[[37,17],6],[[]],[[],2],[[],2],[[],3],0,0,[[]],[[]],[38,38],[[]],[[38,38],14],[[],38],[[38,38],8],[[38,10],11],[[]],[38],[[]],[[38,17],6],[[38,38],[[15,[14]]]],0,[[]],[[],2],[[],2],[[],3],0,0,[[],6],0,[[],17],0,0,0,0,0,[[]],[[]],[39,39],[[]],[[39,39],14],[[],39],[[39,17],6],[[39,39],8],[[39,10],11],[[]],[39],[[]],[[39,39],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,[[]],[[]],[40,40],[[]],[[40,40],14],[[],40],[[40,17],6],[[40,40],8],[[40,10],11],[[]],[40],[[]],[[40,17],17],[[40,40],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,[[]],[[]],[41,41],[[]],[[41,41],14],[[],41],[[41,17],6],[[41,41],8],[[41,10],11],[[]],[41],[[]],[[41,41],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[42,42],[[]],[[],42],[[42,17],6],[[42,42],8],[[42,10],11],[[]],[[]],[[42,42],[[15,[14]]]],[[]],[[],2],[[],2],[[],3],0,[[]],[[]],[43,43],[[]],[[],43],[[43,17],6],[[43,43],8],[[43,10],11],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,[[]],[[]],[44,44],[[]],[[],44],[[44,17],6],[[44,44],8],[[44,10],11],[[]],[[]],[[44,44],[[15,[14]]]],[[]],[[],2],[[],2],[[],3]],"p":[[8,"Default"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"Operator"],[15,"f32"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"PartialOrd"],[4,"Ordering"],[4,"Option"],[3,"DisplaceOp"],[3,"Vec3"],[3,"ElongateOp"],[4,"Approx"],[4,"Exact"],[3,"ExtrudeDistOp"],[3,"ExtrudeInfiniteOp"],[3,"HollowOp"],[3,"IntersectionOp"],[3,"ReflectOp"],[3,"RepeatInfiniteOp"],[3,"RepeatCountOp"],[3,"RotateOp"],[3,"RoundOp"],[3,"ScaleOp"],[3,"SmoothIntersectionOp"],[3,"SmoothSubtractionOp"],[3,"SmoothUnionOp"],[3,"SubtractionOp"],[3,"TranslateOp"],[8,"Ord"],[3,"TwistOp"],[3,"UnionOp"],[3,"ChebyshevMetric"],[3,"EuclideanMetric"],[3,"TaxicabMetric"],[3,"Octahedron"],[3,"Plane"],[3,"Torus"],[8,"SignedDistanceOperator"],[8,"SignedDistanceField"],[8,"SignedDistanceNormal"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
