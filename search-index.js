var searchIndex = JSON.parse('{\
"rust_gpu_sdf":{"doc":"","t":[6,6,6,5,0,0,0,0,3,8,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,0,0,11,0,11,11,11,11,11,12,10,11,11,11,11,11,0,0,0,11,11,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,11,12,11,0,11,11,11,0,11,0,17,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,6,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,6,3,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,6,3,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,16,8,3,11,11,11,11,11,12,11,11,11,12,11,11,10,0,0,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,0,10,0,0,0,0,0,0,3,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,6,6,6,6,6,6,6,6,6,6,11,3,11,11,12,11,11,11,11,12,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["D1","D2","D3","default","operators","prelude","raymarch","signed_distance_field","Operator","SignedDistanceOperator","angle","axial_reflect","axis","axis","axis_pos","axis_rot","borrow","borrow_mut","clone","clone_into","composite","count","default","delta","dir","dir","displace","displace","dist","elongate","eq","evaluate","extent","fmt","from","hash","hollow","intersection","into","isosurface","k","k","k","k","op","op","operator","partial_cmp","period","period","radius","radius","reflect","repeat","rotate","rotation","rotation","scale","scale","scale","sdf","sdf","sdf","sdf","sdf","sdf","sided","smooth_intersection","smooth_subtraction","smooth_union","stretch","subtraction","target","target","to_owned","translate","translation","try_from","try_into","twist","type_id","union","AXIS_X","AXIS_Y","AXIS_Z","AxialReflect","AxialReflectOp","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","operator","operator","operator","to_owned","try_from","try_into","type_id","Onion","Transform","radius","rotation","scale","Displace","DisplaceOp","borrow","borrow_mut","clone","clone_into","cmp","default","displace","displace","displace","eq","fmt","from","hash","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Elongate","ElongateOp","borrow","borrow_mut","default","default","default","extent","extent","extent","fmt","from","into","operator","operator","operator","try_from","try_into","type_id","Hollow","HollowOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","operator","operator","partial_cmp","to_owned","try_from","try_into","type_id","Intersection","IntersectionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Isosurface","IsosurfaceOp","borrow","borrow_mut","clone","clone_into","default","delta","delta","delta","eq","fmt","from","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Reflect","ReflectOp","axis","axis","axis","borrow","borrow_mut","clone","clone_into","default","default","default","eq","fmt","from","into","operator","operator","operator","to_owned","try_from","try_into","type_id","RepeatCount","RepeatCountOp","RepeatInfinite","RepeatInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","count","default","default","default","default","default","eq","eq","fmt","fmt","from","from","into","into","operator","operator","operator","period","period","period","period","period","period","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Rotate2d","Rotate2dOp","Rotate3d","Rotate3dOp","angle","angle","angle","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","into","into","operator","operator","rotation","rotation","rotation","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Scale","ScaleOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","partial_cmp","scale","scale","scale","to_owned","try_from","try_into","type_id","Sided","SidedOp","axis","axis","axis","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","operator","operator","partial_cmp","to_owned","try_from","try_into","type_id","SmoothIntersection","SmoothIntersectionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","SmoothSubtraction","SmoothSubtractionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","SmoothUnion","SmoothUnionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","StretchDist","StretchDistOp","StretchInfinite","StretchInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","dir","dir","dir","dir","dir","dir","dist","dist","dist","eq","eq","fmt","fmt","from","from","into","into","operator","operator","operator","operator","operator","operator","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Subtraction","SubtractionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Translate","TranslateOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","to_owned","translation","translation","translation","try_from","try_into","type_id","Twist","TwistOp","axis_pos","axis_pos","axis_pos","axis_rot","axis_rot","axis_rot","borrow","borrow_mut","clone","clone_into","default","default","eq","fmt","from","into","k","k","k","operator","operator","to_owned","try_from","try_into","type_id","Union","UnionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Output","Raymarch","RaymarchOutput","borrow","borrow_mut","clone","clone_into","default","dist","eq","fmt","from","hit","into","partial_cmp","raymarch","sphere_trace_lipschitz","sphere_trace_naive","steps","to_owned","try_from","try_into","type_id","SphereTraceLipschitz","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","raymarch","to_owned","try_from","try_into","type_id","SphereTraceNaive","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","raymarch","to_owned","try_from","try_into","type_id","SignedDistanceField","adapters","attributes","evaluate","metrics","shapes","extrude","extrude_interior","normals","sweep","Extrude","axis","axis","borrow","borrow_mut","clone","clone_into","default","depth","depth","eq","evaluate","evaluate","fmt","from","into","sdf","sdf","to_owned","try_from","try_into","type_id","ExtrudeInterior","borrow","borrow_mut","clone","clone_into","default","eq","evaluate","evaluate","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id","CentralDiffNormals","TetrahedronNormals","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","epsilon","epsilon","epsilon","epsilon","eq","eq","evaluate","evaluate","evaluate","evaluate","evaluate","fmt","fmt","from","from","into","into","partial_cmp","partial_cmp","sdf","sdf","sdf","sdf","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Sweep","borrow","borrow_mut","clone","clone_into","cmp","core","core","default","eq","evaluate","evaluate","fmt","from","hash","into","partial_cmp","shell","shell","to_owned","try_from","try_into","type_id","color","distance","normal","position","tangent","uv","Color","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","Distance","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","Normal","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","from","into","to_owned","to_string","try_from","try_into","type_id","Position","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","Tangent","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","from","into","to_owned","to_string","try_from","try_into","type_id","Uv","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","chebyshev","euclidean","taxicab","ChebyshevMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","EuclideanMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","TaxicabMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","composite","ngon","octahedron","plane","Ball","Box","Capsule","Circle","Cube","Line","Point","Sphere","Square","Torus","radius","Ngon","borrow","borrow_mut","cos","default","evaluate","from","into","radius","sin","tan","try_from","try_into","type_id","Octahedron","borrow","borrow_mut","clone","clone_into","default","eq","evaluate","fmt","from","into","partial_cmp","size","size","to_owned","try_from","try_into","type_id","Plane","borrow","borrow_mut","clone","clone_into","default","default","default","dir","dir","eq","evaluate","evaluate","evaluate","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["rust_gpu_sdf","","","","","","","","rust_gpu_sdf::operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::axial_reflect","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::composite","","","","","rust_gpu_sdf::operators::displace","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::elongate","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::hollow","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::intersection","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::isosurface","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::reflect","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::repeat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::rotate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::scale","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::sided","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_intersection","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_subtraction","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_union","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::stretch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::subtraction","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::translate","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::twist","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::union","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch::sphere_trace_lipschitz","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch::sphere_trace_naive","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field","","","","","","rust_gpu_sdf::signed_distance_field::adapters","","","","rust_gpu_sdf::signed_distance_field::adapters::extrude","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::extrude_interior","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::normals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::sweep","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes","","","","","","rust_gpu_sdf::signed_distance_field::attributes::color","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::distance","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::normal","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::position","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::tangent","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::uv","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics","","","rust_gpu_sdf::signed_distance_field::metrics::chebyshev","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::euclidean","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::taxicab","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes","","","","rust_gpu_sdf::signed_distance_field::shapes::composite","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::ngon","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::octahedron","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::plane","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Free-standing <code>Default::default()</code> invocation","Types that modify a distance field.","","","Types that describe signed distance fields.","Applies a <code>SignedDistanceOperator</code> to a <code>SignedDistanceField</code>.","Modifies the input / output of a <code>SignedDistanceField</code>.","","Reflect a distance field about an arbitrary axis.","","","","","","","","","Operators composed from other operators.","","","","","","Displace the output of a distance field using the output …","","","Extrude a shape along its axes, preserving exterior …","","","","","Returns the argument unchanged.","","Convert a solid shape into a hollow one with an infinitely …","Compute the boolean intersection of two distance fields.","Calls <code>U::from(self)</code>.","Shift the isosurface of a distance field by a given amount.","","","","","","","","","","","","","Reflect a distance field about an arbitrary axis.","Operators for repeating distance fields across a domain.","Rotate a distance field.","","","Uniformly scale a distance field.","","","","","","","","","Given an infinitely-thin surface, divide space into …","Compute the blended boolean intersection of two distance …","Compute the blended boolean subtraction of two distance …","Compute the blended boolean union of two distance fields.","Stretch a shape along an arbitrary axis, preserving …","Compute the boolean subtraction of two distance fields.","","","","Apply a positional translation to a distance field.","","","","Twist a distance field around an arbitrary axis.","","Compute the boolean union of two distance fields.","","","","Reflect a distance field about X / Y / Z","Cheaply reflect a distance field about X / Y / Z using a …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Converts a solid shape into a hollow one with the given …","Translate, rotate, and scale the wrapped SDF.","","","","Displace the output of a distance field using the output …","Displace the output of a distance field using the output …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Extrude a shape along its axes, preserving exterior …","Extrude a shape along its axes, preserving exterior …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Convert a solid shape into a hollow one with an infinitely …","Convert a solid shape into a hollow one with an infinitely …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the boolean intersection of two distance fields.","Compute the boolean intersection of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Add an arbitrary radius to a distance field.","Shift the isosurface of a distance field by a given amount.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Reflect a distance field about an arbitrary axis.","Reflect a distance field about an arbitrary axis.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Repeat a distance field a set number of times in one or …","Repeat a distance field a set number of times in one or …","Repeat a distance field infinitely in one or more axes.","Repeat a distance field infinitely in one or more axes.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Rotate a 3D distance field.","Rotate a distance field.","Rotate a distance field.","Rotate a distance field.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Uniformly scale a distance field.","Uniformly scale a distance field.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Given an infinitely-thin surface, divide space into …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the blended boolean intersection of two distance …","Compute the blended boolean intersection of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Compute the blended boolean subtraction of two distance …","Compute the blended boolean subtraction of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Compute the blended boolean union of two distance fields.","Compute the blended boolean union of two distance fields.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Extrude a shape by an arbitrary distance along an …","Extrude a shape by an arbitrary distance along an …","Extrude a shape infinitely along an arbitrary axis.","Extrude a shape infinitely along an arbitrary axis.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Compute the boolean subtraction of two distance fields.","Compute the boolean subtraction of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Apply a positional translation to a distance field.","Apply a positional translation to a distance field.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Twist a distance field around an arbitrary axis.","Twist a distance field around an arbitrary axis.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Compute the boolean union of two distance fields.","Compute the boolean union of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Describes a shape in terms of distance to the nearest …","Distance fields that convert between other kinds of …","Attributes that can be computed by a distance field","","Distance metrics.","Distance field shapes.","Extrude a 2D distance field into 3D.","","","Create a 3D distance field by sweeping a 2D distance field …","Extrude a 2D distance field into 3D.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Extrude a 2D distance field into 3D, using its interior …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Create a 3D distance field by sweeping a 2D distance field …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Chebyshev distance metric.","Euclidean distance metric.","Taxicab distance metric.","Chebyshev distance metric.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Euclidian distance metric.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Taxicab distance metric.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Shapes composed from other shapes.","","An octahedron.","A plane.","A ball.","A box.","A capsule.","A 2D circle.","A 3D cube.","An infinitely thin line. Not very useful on its own; …","An infinitely small point. Not very useful on its own; …","A 3D sphere.","A 2D square.","A 3D torus.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","An octahedron.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A plane.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,3,3,0,3,3,3,3,3,3,0,0,3,0,3,3,3,3,3,3,88,3,3,3,3,3,0,0,0,3,3,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,3,3,3,0,3,3,3,0,3,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,43,44,44,0,0,13,13,13,13,13,13,46,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,16,16,16,16,16,47,16,16,16,16,16,16,16,16,16,16,16,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,48,36,36,36,36,36,36,0,0,10,10,10,10,10,49,10,10,10,10,10,10,10,10,10,10,10,10,0,0,50,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,27,9,27,9,27,9,27,9,51,9,9,27,27,27,9,9,27,9,27,9,27,9,27,9,27,9,9,52,51,27,9,27,9,27,9,27,9,27,9,27,9,0,0,0,0,53,2,2,2,31,2,31,2,31,2,31,2,31,2,31,2,31,2,31,2,31,2,31,54,31,31,2,31,2,31,2,31,2,31,0,0,30,30,30,30,30,30,30,30,30,30,30,55,30,30,30,30,30,30,0,0,56,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,21,21,21,21,21,21,21,21,21,57,21,21,21,21,57,21,21,21,21,21,21,0,0,22,22,22,22,22,22,22,22,22,58,22,22,22,22,58,22,22,22,22,22,22,0,0,23,23,23,23,23,23,23,23,23,59,23,23,23,23,59,23,23,23,23,23,23,0,0,0,0,12,11,12,11,12,11,12,11,12,12,11,11,60,61,12,11,12,11,61,11,11,12,11,12,11,12,11,12,11,12,12,12,11,11,11,12,11,12,11,12,11,12,11,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,62,34,34,34,34,34,34,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,63,32,32,32,32,32,0,0,64,7,7,64,7,7,7,7,7,7,7,7,7,7,7,7,64,7,7,7,7,7,7,7,7,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,65,35,35,35,35,35,35,89,0,0,66,66,66,66,66,66,66,66,66,66,66,66,89,0,0,66,66,66,66,66,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,90,0,0,0,0,0,0,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,71,72,72,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,85,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87],"f":[0,0,0,[[],1],0,0,0,0,0,0,[[[3,[2]]],4],0,[[[3,[5]]]],[[[3,[6]]]],[[[3,[7]]]],[[[3,[7]]]],[[]],[[]],[[[3,[8,8]]],[[3,[8,8]]]],[[]],0,[[[3,[9]]]],[[],[[3,[1,1]]]],[[[3,[10]]],4],[[[3,[11]]]],[[[3,[12]]]],0,[[[3,[13]]]],[[[3,[11]]],4],0,[[[3,[14,14]],3],15],[3],[[[3,[16]]]],[[[3,[17,17]],18],19],[[]],[[[3,[20,20]]]],0,0,[[]],0,[[[3,[21]]],4],[[[3,[22]]],4],[[[3,[7]]],4],[[[3,[23]]],4],[3],0,[[]],[[[3,[24,24]],3],[[26,[25]]]],[[[3,[9]]]],[[[3,[27]]]],[[[3,[[3,[28]],10]]],4],[[[3,[29,10]]],4],0,0,0,[[[3,[[3,[[3,[30]],31]],32]]],33],[[[3,[31]]],33],0,[[[3,[[3,[[3,[30]],31]],32]]],4],[[[3,[30]]],4],[[[3,[34]]]],[[[3,[22]]]],[[[3,[23]]]],[[[3,[21]]]],[[[3,[35]]]],[[[3,[36]]]],0,0,0,0,0,0,[3],0,[[]],0,[[[3,[32]]]],[[],37],[[],37],0,[[],38],0,0,0,0,0,0,[[]],[[]],[39,39],[[]],[[39,39],15],[[39,18],19],[[]],[[]],[[39,40],41],[[39,42],41],[[39,4],41],[[]],[[],37],[[],37],[[],38],0,0,[43,4],[44,33],[44,4],0,0,[[]],[[]],[[[13,[8]]],[[13,[8]]]],[[]],[[[13,[45]],13],25],[[],[[13,[1]]]],[46],[13],0,[[[13,[14]],13],15],[[[13,[17]],18],19],[[]],[[[13,[20]]]],[[]],[13,41],[[[13,[24]],13],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[],[[16,[42]]]],[[],[[16,[40]]]],[[],[[16,[4]]]],[47],[16],0,[[[16,[17]],18],19],[[]],[[]],[[[16,[40]],40],41],[[[16,[42]],42],41],[[[16,[4]],4],41],[[],37],[[],37],[[],38],0,0,[[]],[[]],[28,28],[[]],[[],28],[[28,28],15],[[28,18],19],[[]],[[]],[[28,42],41],[[28,40],41],[[28,4],41],[[28,28],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[36,[8]]],[[36,[8]]]],[[]],[[[36,[45]],36],25],[[],[[36,[1]]]],[[[36,[14]],36],15],[[[36,[17]],18],19],[[]],[[[36,[20]]]],[[]],[36,41],[[[36,[24]],36],[[26,[25]]]],[48],[36],0,[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[10,10],[[]],[[],10],[49,4],[10,4],0,[[10,10],15],[[10,18],19],[[]],[[]],[10,41],[[10,10],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,[50],[6],0,[[]],[[]],[[[6,[8]]],[[6,[8]]]],[[]],[[],[[6,[40]]]],[[],[[6,[4]]]],[[],[[6,[42]]]],[[[6,[14]],6],15],[[[6,[17]],18],19],[[]],[[]],[[[6,[4]],4],41],[[[6,[40]],40],41],[[[6,[42]],42],41],[[]],[[],37],[[],37],[[],38],0,0,0,0,[[]],[[]],[[]],[[]],[[[27,[8]]],[[27,[8]]]],[[[9,[8]]],[[9,[8]]]],[[]],[[]],[51],[9],0,[[],[[27,[40]]]],[[],[[27,[4]]]],[[],[[27,[42]]]],[[],[[9,[40]]]],[[],[[9,[42]]]],[[[27,[14]],27],15],[[[9,[14]],9],15],[[[27,[17]],18],19],[[[9,[17]],18],19],[[]],[[]],[[]],[[]],[27,41],[[[9,[42]],42],41],[[[9,[40]],40],41],[52],[51],[27],[9],0,0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],0,0,0,0,[53,4],[2,4],0,[[]],[[]],[[]],[[]],[2,2],[31,31],[[]],[[]],[[],2],[[],31],[[2,2],15],[[31,31],15],[[2,18],19],[[31,18],19],[[]],[[]],[[]],[[]],[[2,40],41],[[31,42],41],[54,33],[31,33],0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],0,0,[[]],[[]],[30,30],[[]],[[],30],[[30,30],15],[[30,18],19],[[]],[[]],[30,41],[[30,30],[[26,[25]]]],[55,4],[30,4],0,[[]],[[],37],[[],37],[[],38],0,0,[56],[5],0,[[]],[[]],[[[5,[8]]],[[5,[8]]]],[[]],[[[5,[45]],5],25],[[],[[5,[1]]]],[[[5,[14]],5],15],[[[5,[17]],18],19],[[]],[[[5,[20]]]],[[]],[[[5,[42]],42],41],[[[5,[40]],40],41],[[[5,[4]],4],41],[[[5,[24]],5],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[21,[8]]],[[21,[8]]]],[[]],[[],[[21,[1]]]],[[[21,[14]],21],15],[[[21,[17]],18],19],[[]],[[]],[57,4],[21,4],0,[21,41],[[[21,[24]],21],[[26,[25]]]],[57],[21],0,[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[22,[8]]],[[22,[8]]]],[[]],[[],[[22,[1]]]],[[[22,[14]],22],15],[[[22,[17]],18],19],[[]],[[]],[58,4],[22,4],0,[22,41],[[[22,[24]],22],[[26,[25]]]],[58],[22],0,[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[23,[8]]],[[23,[8]]]],[[]],[[],[[23,[1]]]],[[[23,[14]],23],15],[[[23,[17]],18],19],[[]],[[]],[59,4],[23,4],0,[23,41],[[[23,[24]],23],[[26,[25]]]],[59],[23],0,[[]],[[],37],[[],37],[[],38],0,0,0,0,[[]],[[]],[[]],[[]],[[[12,[8]]],[[12,[8]]]],[[[11,[8]]],[[11,[8]]]],[[]],[[]],[[],[[12,[40]]]],[[],[[12,[42]]]],[[],[[11,[42]]]],[[],[[11,[40]]]],[60],[61],[12],[11],0,0,[61,4],[11,4],0,[[[12,[14]],12],15],[[[11,[14]],11],15],[[[12,[17]],18],19],[[[11,[17]],18],19],[[]],[[]],[[]],[[]],[[[12,[42]],42],41],[[[12,[40]],40],41],[[[12,[4]],4],41],[[[11,[42]],42],41],[[[11,[40]],40],41],[[[11,[4]],4],41],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],0,0,[[]],[[]],[[[34,[8]]],[[34,[8]]]],[[]],[[[34,[45]],34],25],[[],[[34,[1]]]],[[[34,[14]],34],15],[[[34,[17]],18],19],[[]],[[[34,[20]]]],[[]],[34,41],[[[34,[24]],34],[[26,[25]]]],[62],[34],0,[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[32,[8]]],[[32,[8]]]],[[]],[[[32,[45]],32],25],[[],[[32,[1]]]],[[[32,[14]],32],15],[[[32,[17]],18],19],[[]],[[[32,[20]]]],[[]],[32,41],[[[32,[24]],32],[[26,[25]]]],[[]],[63],[32],0,[[],37],[[],37],[[],38],0,0,[64],[7],0,[64],[7],0,[[]],[[]],[[[7,[8]]],[[7,[8]]]],[[]],[[],[[7,[40]]]],[[],[[7,[42]]]],[[[7,[14]],7],15],[[[7,[17]],18],19],[[]],[[]],[64,4],[7,4],0,[[[7,[42]],42],41],[[[7,[40]],40],41],[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[[35,[8]]],[[35,[8]]]],[[]],[[[35,[45]],35],25],[[],[[35,[1]]]],[[[35,[14]],35],15],[[[35,[17]],18],19],[[]],[[[35,[20]]]],[[]],[35,41],[[[35,[24]],35],[[26,[25]]]],[65],[35],0,[[]],[[],37],[[],37],[[],38],0,0,0,[[]],[[]],[66,66],[[]],[[],66],0,[[66,66],15],[[66,18],19],[[]],0,[[]],[[66,66],[[26,[25]]]],[[4,4,42,42,4]],0,0,0,[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[67,67],[[]],[[],67],[[67,67],15],[[67,18],19],[[]],[[]],0,[[67,4,4,42,42,4]],[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[68,68],[[]],[[],68],[[68,68],15],[[68,18],19],[[]],[[]],[[68,4,4,42,42,4]],[[]],[[],37],[[],37],[[],38],0,0,0,[[]],0,0,0,0,0,0,0,[69,42],0,[[]],[[]],[[[69,[8]]],[[69,[8]]]],[[]],[[],[[69,[1]]]],[69,4],0,[[[69,[14]],69],15],[[69,42],41],[[69,40],41],[[[69,[17]],18],19],[[]],[[]],[69],0,[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[[[70,[8]]],[[70,[8]]]],[[]],[[],70],[[[70,[14]],70],15],[[70,42],41],[[70,40],41],[[[70,[17]],18],19],[[]],[[]],[[[70,[24]],70],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,[[]],[[]],[[]],[[]],[[[71,[8]]],[[71,[8]]]],[[[72,[8]]],[[72,[8]]]],[[]],[[]],[[],[[71,[1]]]],[[],[[72,[1]]]],[71,4],[72,4],0,0,[[[71,[14]],71],15],[[[72,[14]],72],15],[[71,42],[[73,[42]]]],[[71,40],[[73,[40]]]],[[72,4],[[73,[4]]]],[[72,40],[[73,[40]]]],[[72,42],[[73,[42]]]],[[[71,[17]],18],19],[[[72,[17]],18],19],[[]],[[]],[[]],[[]],[[[71,[24]],71],[[26,[25]]]],[[[72,[24]],72],[[26,[25]]]],[71],[72],0,0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],0,[[]],[[]],[[[74,[8,8]]],[[74,[8,8]]]],[[]],[[[74,[45,45]],74],25],[74],0,[[],[[74,[1,1]]]],[[[74,[14,14]],74],15],[[74,42],41],[[74,40],41],[[[74,[17,17]],18],19],[[]],[[[74,[20,20]]]],[[]],[[[74,[24,24]],74],[[26,[25]]]],[74],0,[[]],[[],37],[[],37],[[],38],0,0,0,0,0,0,0,[[]],[[]],[75,75],[[]],[[],75],[75],[75],[[75,75],15],[[75,18],19],[[75,18],19],[[]],[76,75],[[]],[[]],[[],77],[[],37],[[],37],[[],38],0,[[]],[[]],[41,41],[[]],[[],41],[41],[41],[[41,41],15],[[41,18],19],[[41,18],19],[[]],[4,41],[[]],[[41,41],[[26,[25]]]],[[]],[[],77],[[],37],[[],37],[[],38],0,[[]],[[]],[[[73,[8]]],[[73,[8]]]],[[]],[[],[[73,[1]]]],[73],[73],[[[73,[14]],73],15],[[73,18],19],[[[73,[17]],18],19],[[],73],[78],[[]],[[]],[[]],[[],77],[[],37],[[],37],[[],38],0,[[]],[[]],[79,79],[[]],[[],79],[79],[79],[[79,79],15],[[79,18],19],[[79,18],19],[[]],[42,79],[[]],[[]],[[],77],[[],37],[[],37],[[],38],0,[[]],[[]],[[[80,[8]]],[[80,[8]]]],[[]],[[],[[80,[1]]]],[80],[80],[[[80,[14]],80],15],[[[80,[17]],18],19],[[80,18],19],[[],80],[[]],[78],[[]],[[]],[[],77],[[],37],[[],37],[[],38],0,[[]],[[]],[81,81],[[]],[[],81],[81],[81],[[81,81],15],[[81,18],19],[[81,18],19],[[]],[40,81],[[]],[[]],[[],77],[[],37],[[],37],[[],38],0,0,0,0,[[]],[[]],[82,82],[[]],[[82,82],25],[[],82],[[82,82],15],[[82,42],41],[[82,4],41],[[82,40],41],[[82,18],19],[[]],[82],[[]],[[82,82],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[29,29],[[]],[[29,29],25],[[],29],[[29,29],15],[[29,40],41],[[29,42],41],[[29,4],41],[[29,40],[[73,[40]]]],[[29,42],[[73,[42]]]],[[29,4],[[73,[4]]]],[[29,18],19],[[]],[29],[[]],[[29,29],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[83,83],[[]],[[83,83],25],[[],83],[[83,83],15],[[83,42],41],[[83,40],41],[[83,4],41],[[83,18],19],[[]],[83],[[]],[[83,83],[[26,[25]]]],[[]],[[],37],[[],37],[[],38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[84,4],0,[[]],[[]],0,[[],85],[[85,40],41],[[]],[[]],0,0,0,[[],37],[[],37],[[],38],0,[[]],[[]],[86,86],[[]],[[],86],[[86,86],15],[[86,42],41],[[86,18],19],[[]],[[]],[[86,86],[[26,[25]]]],[86,4],0,[[]],[[],37],[[],37],[[],38],0,[[]],[[]],[[[87,[8]]],[[87,[8]]]],[[]],[[],[[87,[40]]]],[[],[[87,[42]]]],[[],[[87,[4]]]],[87],0,[[[87,[14]],87],15],[[[87,[40]],40],41],[[[87,[42]],42],41],[[[87,[4]],4],41],[[[87,[17]],18],19],[[]],[[]],[[]],[[],37],[[],37],[[],38]],"p":[[8,"Default"],[3,"Rotate2dOp"],[3,"Operator"],[15,"f32"],[3,"SidedOp"],[3,"ReflectOp"],[3,"TwistOp"],[8,"Clone"],[3,"RepeatCountOp"],[3,"IsosurfaceOp"],[3,"StretchDistOp"],[3,"StretchInfiniteOp"],[3,"DisplaceOp"],[8,"PartialEq"],[15,"bool"],[3,"ElongateOp"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[3,"SmoothIntersectionOp"],[3,"SmoothSubtractionOp"],[3,"SmoothUnionOp"],[8,"PartialOrd"],[4,"Ordering"],[4,"Option"],[3,"RepeatInfiniteOp"],[3,"HollowOp"],[3,"EuclideanMetric"],[3,"ScaleOp"],[3,"Rotate3dOp"],[3,"TranslateOp"],[3,"Quat"],[3,"SubtractionOp"],[3,"UnionOp"],[3,"IntersectionOp"],[4,"Result"],[3,"TypeId"],[3,"AxialReflectOp"],[3,"Vec2"],[3,"Distance"],[3,"Vec3"],[6,"Onion"],[6,"Transform"],[8,"Ord"],[6,"Displace"],[6,"Elongate"],[6,"Intersection"],[6,"Isosurface"],[6,"Reflect"],[6,"RepeatCount"],[6,"RepeatInfinite"],[6,"Rotate2d"],[6,"Rotate3d"],[6,"Scale"],[6,"Sided"],[6,"SmoothIntersection"],[6,"SmoothSubtraction"],[6,"SmoothUnion"],[6,"StretchInfinite"],[6,"StretchDist"],[6,"Subtraction"],[6,"Translate"],[6,"Twist"],[6,"Union"],[3,"RaymarchOutput"],[3,"SphereTraceLipschitz"],[3,"SphereTraceNaive"],[3,"Extrude"],[3,"ExtrudeInterior"],[3,"TetrahedronNormals"],[3,"CentralDiffNormals"],[3,"Normal"],[3,"Sweep"],[3,"Color"],[3,"Vec4"],[3,"String"],[15,"never"],[3,"Position"],[3,"Tangent"],[3,"Uv"],[3,"ChebyshevMetric"],[3,"TaxicabMetric"],[6,"Ball"],[3,"Ngon"],[3,"Octahedron"],[3,"Plane"],[8,"SignedDistanceOperator"],[8,"Raymarch"],[8,"SignedDistanceField"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
