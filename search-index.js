var searchIndex = JSON.parse('{\
"rust_gpu_sdf":{"doc":"","t":[6,6,6,5,0,0,0,0,3,8,11,0,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,0,0,11,0,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,0,0,0,11,11,11,11,11,11,11,12,11,0,11,11,11,11,0,11,0,17,17,17,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,6,6,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,6,3,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,6,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,6,3,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,16,8,3,11,11,11,11,11,12,11,11,11,12,11,11,10,0,0,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,0,10,0,0,0,0,0,0,3,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["D1","D2","D3","default","operators","prelude","raymarch","signed_distance_field","Operator","SignedDistanceOperator","angle","axial_reflect","axis","axis","axis_pos","axis_rot","borrow","borrow_mut","clone","clone_into","compose","composite","conditional","conditional_op","cos","count","decagon","default","delta","dir","dir","displace","displace","dist","elongate","eq","evaluate","extent","fmt","from","hash","hexagon","hollow","intersection","into","isosurface","k","k","k","k","new","nonagon","octagon","op","op","operator","partial_cmp","pentagon","period","period","quadrilateral","radius","radius","radius","radius","radius","radius","radius","radius","reflect","repeat","rotate","rotation","rotation","scale","scale","scale","sdf","sdf","sdf","sdf","sdf","sdf","sdf","sdf_a","sdf_b","septagon","sided","sin","smooth_intersection","smooth_subtraction","smooth_union","stretch","subtraction","tan","tan","tan","tan","tan","tan","target","target","to_owned","translate","translation","triangle","try_from","try_into","twist","type_id","union","AXIS_X","AXIS_XY","AXIS_XYZ","AXIS_Y","AXIS_Z","AxialReflect","AxialReflectOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","operator","operator","to_owned","try_from","try_into","type_id","Compose","ComposeOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","operator","partial_cmp","sdf_a","sdf_a","sdf_a","sdf_b","sdf_b","sdf_b","to_owned","try_from","try_into","type_id","Onion","Transform","radius","rotation","scale","Conditional","ConditionalOp","borrow","borrow_mut","clone","clone_into","cmp","conditional_op","default","eq","fmt","from","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Displace","DisplaceOp","borrow","borrow_mut","clone","clone_into","cmp","default","displace","displace","displace","eq","fmt","from","hash","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Elongate","ElongateOp","borrow","borrow_mut","default","default","default","extent","extent","extent","fmt","from","into","operator","operator","operator","try_from","try_into","type_id","Hollow","HollowOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","operator","operator","partial_cmp","to_owned","try_from","try_into","type_id","Intersection","IntersectionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Isosurface","IsosurfaceOp","borrow","borrow_mut","clone","clone_into","default","delta","delta","delta","eq","fmt","from","into","operator","partial_cmp","to_owned","try_from","try_into","type_id","Reflect","ReflectOp","axis","axis","axis","borrow","borrow_mut","clone","clone_into","default","default","default","eq","fmt","from","into","operator","operator","operator","to_owned","try_from","try_into","type_id","RepeatCount","RepeatCountOp","RepeatInfinite","RepeatInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","count","default","default","default","default","default","eq","eq","fmt","fmt","from","from","into","into","operator","operator","operator","period","period","period","period","period","period","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Rotate2d","Rotate2dOp","Rotate3d","Rotate3dOp","angle","angle","angle","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","into","into","operator","operator","rotation","rotation","rotation","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Scale","ScaleOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","operator","partial_cmp","scale","scale","scale","to_owned","try_from","try_into","type_id","Sided","SidedOp","axis","axis","axis","borrow","borrow_mut","clone","clone_into","cmp","default","default","default","eq","fmt","from","hash","into","operator","operator","operator","partial_cmp","to_owned","try_from","try_into","type_id","SmoothIntersection","SmoothIntersectionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","SmoothSubtraction","SmoothSubtractionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","SmoothUnion","SmoothUnionOp","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","k","k","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","StretchDist","StretchDistOp","StretchInfinite","StretchInfiniteOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","default","dir","dir","dir","dir","dir","dir","dist","dist","dist","eq","eq","fmt","fmt","from","from","into","into","operator","operator","operator","operator","operator","operator","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Subtraction","SubtractionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Translate","TranslateOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","to_owned","translation","translation","translation","try_from","try_into","type_id","Twist","TwistOp","axis_pos","axis_pos","axis_pos","axis_rot","axis_rot","axis_rot","borrow","borrow_mut","clone","clone_into","default","default","eq","fmt","from","into","k","k","k","operator","operator","to_owned","try_from","try_into","type_id","Union","UnionOp","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","operator","partial_cmp","sdf","sdf","sdf","to_owned","try_from","try_into","type_id","Output","Raymarch","RaymarchOutput","borrow","borrow_mut","clone","clone_into","default","dist","eq","fmt","from","hit","into","partial_cmp","raymarch","sphere_trace_lipschitz","sphere_trace_naive","steps","to_owned","try_from","try_into","type_id","SphereTraceLipschitz","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","k","raymarch","to_owned","try_from","try_into","type_id","SphereTraceNaive","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","raymarch","to_owned","try_from","try_into","type_id","SignedDistanceField","adapters","attributes","evaluate","metrics","shapes","extrude","extrude_interior","normals","sweep","Extrude","axis","axis","borrow","borrow_mut","clone","clone_into","default","depth","depth","eq","evaluate","evaluate","fmt","from","into","sdf","sdf","to_owned","try_from","try_into","type_id","ExtrudeInterior","borrow","borrow_mut","clone","clone_into","default","eq","evaluate","evaluate","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id","CentralDiffNormals","TetrahedronNormals","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","epsilon","epsilon","epsilon","epsilon","eq","eq","evaluate","evaluate","evaluate","evaluate","evaluate","fmt","fmt","from","from","into","into","partial_cmp","partial_cmp","sdf","sdf","sdf","sdf","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Sweep","borrow","borrow_mut","clone","clone_into","cmp","core","core","default","eq","evaluate","evaluate","fmt","from","hash","into","partial_cmp","shell","shell","to_owned","try_from","try_into","type_id","color","distance","normal","position","tangent","uv","Color","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","Distance","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","Normal","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","from","into","to_owned","to_string","try_from","try_into","type_id","Position","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","Tangent","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","from","into","to_owned","to_string","try_from","try_into","type_id","Uv","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","fmt","fmt","from","from","into","to_owned","to_string","try_from","try_into","type_id","chebyshev","euclidean","taxicab","ChebyshevMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","EuclideanMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","TaxicabMetric","borrow","borrow_mut","clone","clone_into","cmp","default","eq","evaluate","evaluate","evaluate","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","composite","octahedron","plane","Ball","Box","Capsule","Circle","Cube","Decagon","Hexagon","Line","NgonMirror","Nonagon","Octagon","Pentagon","Point","Quadrilateral","Septagon","Sphere","Square","Torus","Triangle","cos","decagon","hexagon","new","nonagon","octagon","pentagon","quadrilateral","radius","radius","radius","radius","radius","radius","radius","sdf","septagon","sin","tan","tan","tan","tan","tan","tan","triangle","Octahedron","borrow","borrow_mut","clone","clone_into","default","eq","evaluate","fmt","from","into","partial_cmp","size","size","to_owned","try_from","try_into","type_id","Plane","borrow","borrow_mut","clone","clone_into","default","default","default","dir","dir","eq","evaluate","evaluate","evaluate","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["rust_gpu_sdf","","","","","","","","rust_gpu_sdf::operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::axial_reflect","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::compose","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::composite","","","","","rust_gpu_sdf::operators::conditional","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::displace","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::elongate","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::hollow","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::intersection","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::isosurface","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::reflect","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::repeat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::rotate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::scale","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::sided","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_intersection","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_subtraction","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::smooth_union","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::stretch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::subtraction","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::translate","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::twist","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::operators::union","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch::sphere_trace_lipschitz","","","","","","","","","","","","","","","","rust_gpu_sdf::raymarch::sphere_trace_naive","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field","","","","","","rust_gpu_sdf::signed_distance_field::adapters","","","","rust_gpu_sdf::signed_distance_field::adapters::extrude","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::extrude_interior","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::normals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::adapters::sweep","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes","","","","","","rust_gpu_sdf::signed_distance_field::attributes::color","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::distance","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::normal","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::position","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::tangent","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::attributes::uv","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics","","","rust_gpu_sdf::signed_distance_field::metrics::chebyshev","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::euclidean","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::metrics::taxicab","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes","","","rust_gpu_sdf::signed_distance_field::shapes::composite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::octahedron","","","","","","","","","","","","","","","","","","rust_gpu_sdf::signed_distance_field::shapes::plane","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Free-standing <code>Default::default()</code> invocation","Types that modify a distance field.","","","Types that describe signed distance fields.","Applies a <code>SignedDistanceOperator</code> to a <code>SignedDistanceField</code>.","Modifies the input / output of a <code>SignedDistanceField</code>.","","Reflect a distance field about an arbitrary axis.","","","","","","","","","","Operators composed from other operators.","","","","","","","","","","Displace the output of a distance field using the output …","","","Extrude a shape along its axes, preserving exterior …","","","","","Returns the argument unchanged.","","","Convert a solid shape into a hollow one with an infinitely …","Compute the boolean intersection of two distance fields.","Calls <code>U::from(self)</code>.","Shift the isosurface of a distance field by a given amount.","","","","","","","","","","","","","","","","","","","","","","","","Reflect a distance field about an arbitrary axis.","Operators for repeating distance fields across a domain.","Rotate a distance field.","","","Uniformly scale a distance field.","","","","","","","","","","","","","Given an infinitely-thin surface, divide space into …","","Compute the blended boolean intersection of two distance …","Compute the blended boolean subtraction of two distance …","Compute the blended boolean union of two distance fields.","Stretch a shape along an arbitrary axis, preserving …","Compute the boolean subtraction of two distance fields.","","","","","","","","","","Apply a positional translation to a distance field.","","","","","Twist a distance field around an arbitrary axis.","","Compute the boolean union of two distance fields.","","","","","","Reflect a distance field about X / Y / Z","Cheaply reflect a distance field about X / Y / Z using a …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Converts a solid shape into a hollow one with the given …","Translate, rotate, and scale the wrapped SDF.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Displace the output of a distance field using the output …","Displace the output of a distance field using the output …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Extrude a shape along its axes, preserving exterior …","Extrude a shape along its axes, preserving exterior …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Convert a solid shape into a hollow one with an infinitely …","Convert a solid shape into a hollow one with an infinitely …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the boolean intersection of two distance fields.","Compute the boolean intersection of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Add an arbitrary radius to a distance field.","Shift the isosurface of a distance field by a given amount.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Reflect a distance field about an arbitrary axis.","Reflect a distance field about an arbitrary axis.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Repeat a distance field a set number of times in one or …","Repeat a distance field a set number of times in one or …","Repeat a distance field infinitely in one or more axes.","Repeat a distance field infinitely in one or more axes.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Rotate a 3D distance field.","Rotate a distance field.","Rotate a distance field.","Rotate a distance field.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Uniformly scale a distance field.","Uniformly scale a distance field.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Given an infinitely-thin surface, divide space into …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Compute the blended boolean intersection of two distance …","Compute the blended boolean intersection of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Compute the blended boolean subtraction of two distance …","Compute the blended boolean subtraction of two distance …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Compute the blended boolean union of two distance fields.","Compute the blended boolean union of two distance fields.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Extrude a shape by an arbitrary distance along an …","Extrude a shape by an arbitrary distance along an …","Extrude a shape infinitely along an arbitrary axis.","Extrude a shape infinitely along an arbitrary axis.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Compute the boolean subtraction of two distance fields.","Compute the boolean subtraction of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Apply a positional translation to a distance field.","Apply a positional translation to a distance field.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Twist a distance field around an arbitrary axis.","Twist a distance field around an arbitrary axis.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Compute the boolean union of two distance fields.","Compute the boolean union of two distance fields.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Describes a shape in terms of distance to the nearest …","Distance fields that convert between other kinds of …","Attributes that can be computed by a distance field","","Distance metrics.","Distance field shapes.","Extrude a 2D distance field into 3D.","","","Create a 3D distance field by sweeping a 2D distance field …","Extrude a 2D distance field into 3D.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Extrude a 2D distance field into 3D, using its interior …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Create a 3D distance field by sweeping a 2D distance field …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Chebyshev distance metric.","Euclidean distance metric.","Taxicab distance metric.","Chebyshev distance metric.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Euclidian distance metric.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Taxicab distance metric.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Shapes composed from other shapes.","An octahedron.","A plane.","A ball.","A box.","A capsule.","A 2D circle.","A 3D cube.","","","An infinitely thin line. Not very useful on its own; …","","","","","An infinitely small point. Not very useful on its own; …","","","A 3D sphere.","A 2D square.","A 3D torus.","","","","","","","","","","","","","","","","","","","","","","","","","","","An octahedron.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A plane.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,3,3,0,3,3,0,3,3,3,3,3,3,3,0,0,3,0,3,3,3,3,3,3,3,3,3,100,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,46,40,40,46,40,40,40,40,40,40,0,0,47,48,48,0,0,9,9,9,9,9,49,9,9,9,9,9,9,9,9,9,9,9,0,0,18,18,18,18,18,18,50,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,21,21,21,21,21,51,21,21,21,21,21,21,21,21,21,21,21,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,52,38,38,38,38,38,38,0,0,16,16,16,16,16,53,16,16,16,16,16,16,16,16,16,16,16,16,0,0,54,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,32,11,32,11,32,11,32,11,55,11,11,32,32,32,11,11,32,11,32,11,32,11,32,11,32,11,11,56,55,32,11,32,11,32,11,32,11,32,11,32,11,0,0,0,0,57,2,2,2,34,2,34,2,34,2,34,2,34,2,34,2,34,2,34,2,34,2,34,58,34,34,2,34,2,34,2,34,2,34,0,0,36,36,36,36,36,36,36,36,36,36,36,59,36,36,36,36,36,36,0,0,60,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,28,28,28,28,28,28,28,28,28,61,28,28,28,28,61,28,28,28,28,28,28,0,0,27,27,27,27,27,27,27,27,27,62,27,27,27,27,62,27,27,27,27,27,27,0,0,26,26,26,26,26,26,26,26,26,63,26,26,26,26,63,26,26,26,26,26,26,0,0,0,0,17,13,17,13,17,13,17,13,17,17,13,13,13,64,65,17,13,17,13,65,13,13,17,13,17,13,17,13,17,13,17,17,17,13,13,13,17,13,17,13,17,13,17,13,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,66,39,39,39,39,39,39,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,67,14,14,14,14,14,0,0,68,7,7,68,7,7,7,7,7,7,7,7,7,7,7,7,68,7,7,7,7,7,7,7,7,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,69,37,37,37,37,37,37,101,0,0,70,70,70,70,70,70,70,70,70,70,70,70,101,0,0,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,102,0,0,0,0,0,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,75,76,76,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,0,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,89,90,88,91,92,93,94,95,96,94,93,97,92,91,88,97,88,96,94,93,97,92,91,96,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],"f":[0,0,0,[[],1],0,0,0,0,0,0,[[[3,[2]]],4],0,[[[3,[5]]]],[[[3,[6]]]],[[[3,[7]]]],[[[3,[7]]]],[[]],[[]],[[[3,[8,8]]],[[3,[8,8]]]],[[]],0,0,0,[[[3,[9]]]],[[[3,[[5,[10]]]]],4],[[[3,[11]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]],[[],[[3,[1,1]]]],[[[3,[16]]],4],[[[3,[17]]]],[[[3,[13]]]],0,[[[3,[18]]]],[[[3,[13]]],4],0,[[[3,[19,19]],3],20],[3],[[[3,[21]]]],[[[3,[22,22]],23],24],[[]],[[[3,[25,25]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]],0,0,[[]],0,[[[3,[7]]],4],[[[3,[26]]],4],[[[3,[27]]],4],[[[3,[28]]],4],[[4,4],[[3,[[5,[10]]]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]],[3],0,[[]],[[[3,[29,29]],3],[[31,[30]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]],[[[3,[11]]]],[[[3,[32]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]],4],[[[3,[16,15]]],4],[[[3,[16,[3,[33]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]],4],0,0,0,[[[3,[34]]],35],[[[3,[14,[3,[34,[3,[36]]]]]]],35],0,[[[3,[14,[3,[34,[3,[36]]]]]]],4],[[[3,[36]]],4],[[[3,[37]]]],[[[3,[27]]]],[[[3,[28]]]],[[[3,[38]]]],[[[3,[[5,[10]]]]]],[[[3,[26]]]],[[[3,[39]]]],[[[3,[40]]]],[[[3,[40]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]]],0,[[[3,[[5,[10]]]]],4],0,0,0,0,0,[[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]]]],4],[[[3,[12,[3,[[5,[10]],[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]]],4],[3],0,[[]],0,[[[3,[14]]]],[[],[[3,[12,[3,[[5,[10]],[3,[[13,[10]],[3,[[14,[10]],[3,[[6,[10]],15]]]]]]]]]]]],[[],41],[[],41],0,[[],42],0,0,0,0,0,0,0,0,[[]],[[]],[12,12],[[]],[[],12],[[12,12],20],[[12,23],24],[[]],[[]],[[12,43],44],[[12,10],44],[[12,4],44],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[40,[8,8]]],[[40,[8,8]]]],[[]],[[[40,[45,45]],40],30],[[],[[40,[1,1]]]],[[[40,[19,19]],40],20],[[[40,[22,22]],23],24],[[]],[[[40,[25,25]]]],[[]],[[40,43],44],[[40,10],44],[[[40,[29,29]],40],[[31,[30]]]],[46],[40],0,[46],[40],0,[[]],[[],41],[[],41],[[],42],0,0,[47,4],[48,35],[48,4],0,0,[[]],[[]],[[[9,[8]]],[[9,[8]]]],[[]],[[[9,[45]],9],30],[49],[[],[[9,[1]]]],[[[9,[19]],9],20],[[[9,[22]],23],24],[[]],[[]],[9,44],[[[9,[29]],9],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[18,[8]]],[[18,[8]]]],[[]],[[[18,[45]],18],30],[[],[[18,[1]]]],[50],[18],0,[[[18,[19]],18],20],[[[18,[22]],23],24],[[]],[[[18,[25]]]],[[]],[18,44],[[[18,[29]],18],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[],[[21,[4]]]],[[],[[21,[43]]]],[[],[[21,[10]]]],[51],[21],0,[[[21,[22]],23],24],[[]],[[]],[[[21,[10]],10],44],[[[21,[4]],4],44],[[[21,[43]],43],44],[[],41],[[],41],[[],42],0,0,[[]],[[]],[33,33],[[]],[[],33],[[33,33],20],[[33,23],24],[[]],[[]],[[33,43],44],[[33,10],44],[[33,4],44],[[33,33],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[38,[8]]],[[38,[8]]]],[[]],[[[38,[45]],38],30],[[],[[38,[1]]]],[[[38,[19]],38],20],[[[38,[22]],23],24],[[]],[[[38,[25]]]],[[]],[38,44],[[[38,[29]],38],[[31,[30]]]],[52],[38],0,[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[16,16],[[]],[[],16],[53,4],[16,4],0,[[16,16],20],[[16,23],24],[[]],[[]],[16,44],[[16,16],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[54],[5],0,[[]],[[]],[[[5,[8]]],[[5,[8]]]],[[]],[[],[[5,[4]]]],[[],[[5,[10]]]],[[],[[5,[43]]]],[[[5,[19]],5],20],[[[5,[22]],23],24],[[]],[[]],[[[5,[43]],43],44],[[[5,[10]],10],44],[[[5,[4]],4],44],[[]],[[],41],[[],41],[[],42],0,0,0,0,[[]],[[]],[[]],[[]],[[[32,[8]]],[[32,[8]]]],[[[11,[8]]],[[11,[8]]]],[[]],[[]],[55],[11],0,[[],[[32,[10]]]],[[],[[32,[4]]]],[[],[[32,[43]]]],[[],[[11,[10]]]],[[],[[11,[43]]]],[[[32,[19]],32],20],[[[11,[19]],11],20],[[[32,[22]],23],24],[[[11,[22]],23],24],[[]],[[]],[[]],[[]],[32,44],[[[11,[10]],10],44],[[[11,[43]],43],44],[56],[55],[32],[11],0,0,[[]],[[]],[[],41],[[],41],[[],41],[[],41],[[],42],[[],42],0,0,0,0,[57,4],[2,4],0,[[]],[[]],[[]],[[]],[2,2],[34,34],[[]],[[]],[[],2],[[],34],[[2,2],20],[[34,34],20],[[2,23],24],[[34,23],24],[[]],[[]],[[]],[[]],[[2,10],44],[[34,43],44],[58,35],[34,35],0,[[]],[[]],[[],41],[[],41],[[],41],[[],41],[[],42],[[],42],0,0,[[]],[[]],[36,36],[[]],[[],36],[[36,36],20],[[36,23],24],[[]],[[]],[36,44],[[36,36],[[31,[30]]]],[59,4],[36,4],0,[[]],[[],41],[[],41],[[],42],0,0,[60],[6],0,[[]],[[]],[[[6,[8]]],[[6,[8]]]],[[]],[[[6,[45]],6],30],[[],[[6,[10]]]],[[],[[6,[4]]]],[[],[[6,[43]]]],[[[6,[19]],6],20],[[[6,[22]],23],24],[[]],[[[6,[25]]]],[[]],[[[6,[10]],10],44],[[[6,[4]],4],44],[[[6,[43]],43],44],[[[6,[29]],6],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[28,[8]]],[[28,[8]]]],[[]],[[],[[28,[1]]]],[[[28,[19]],28],20],[[[28,[22]],23],24],[[]],[[]],[61,4],[28,4],0,[28,44],[[[28,[29]],28],[[31,[30]]]],[61],[28],0,[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[27,[8]]],[[27,[8]]]],[[]],[[],[[27,[1]]]],[[[27,[19]],27],20],[[[27,[22]],23],24],[[]],[[]],[62,4],[27,4],0,[27,44],[[[27,[29]],27],[[31,[30]]]],[62],[27],0,[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[26,[8]]],[[26,[8]]]],[[]],[[],[[26,[1]]]],[[[26,[19]],26],20],[[[26,[22]],23],24],[[]],[[]],[63,4],[26,4],0,[26,44],[[[26,[29]],26],[[31,[30]]]],[63],[26],0,[[]],[[],41],[[],41],[[],42],0,0,0,0,[[]],[[]],[[]],[[]],[[[17,[8]]],[[17,[8]]]],[[[13,[8]]],[[13,[8]]]],[[]],[[]],[[],[[17,[10]]]],[[],[[17,[43]]]],[[],[[13,[43]]]],[[],[[13,[10]]]],[[],[[13,[4]]]],[64],[65],[17],[13],0,0,[65,4],[13,4],0,[[[17,[19]],17],20],[[[13,[19]],13],20],[[[17,[22]],23],24],[[[13,[22]],23],24],[[]],[[]],[[]],[[]],[[[17,[43]],43],44],[[[17,[10]],10],44],[[[17,[4]],4],44],[[[13,[43]],43],44],[[[13,[10]],10],44],[[[13,[4]],4],44],[[]],[[]],[[],41],[[],41],[[],41],[[],41],[[],42],[[],42],0,0,[[]],[[]],[[[39,[8]]],[[39,[8]]]],[[]],[[[39,[45]],39],30],[[],[[39,[1]]]],[[[39,[19]],39],20],[[[39,[22]],23],24],[[]],[[[39,[25]]]],[[]],[39,44],[[[39,[29]],39],[[31,[30]]]],[66],[39],0,[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[14,[8]]],[[14,[8]]]],[[]],[[[14,[45]],14],30],[[],[[14,[1]]]],[[[14,[19]],14],20],[[[14,[22]],23],24],[[]],[[[14,[25]]]],[[]],[14,44],[[[14,[29]],14],[[31,[30]]]],[[]],[67],[14],0,[[],41],[[],41],[[],42],0,0,[68],[7],0,[68],[7],0,[[]],[[]],[[[7,[8]]],[[7,[8]]]],[[]],[[],[[7,[43]]]],[[],[[7,[10]]]],[[[7,[19]],7],20],[[[7,[22]],23],24],[[]],[[]],[68,4],[7,4],0,[[[7,[10]],10],44],[[[7,[43]],43],44],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[[37,[8]]],[[37,[8]]]],[[]],[[[37,[45]],37],30],[[],[[37,[1]]]],[[[37,[19]],37],20],[[[37,[22]],23],24],[[]],[[[37,[25]]]],[[]],[37,44],[[[37,[29]],37],[[31,[30]]]],[69],[37],0,[[]],[[],41],[[],41],[[],42],0,0,0,[[]],[[]],[70,70],[[]],[[],70],0,[[70,70],20],[[70,23],24],[[]],0,[[]],[[70,70],[[31,[30]]]],[[4,4,43,43,4]],0,0,0,[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[71,71],[[]],[[],71],[[71,71],20],[[71,23],24],[[]],[[]],0,[[71,4,4,43,43,4]],[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[72,72],[[]],[[],72],[[72,72],20],[[72,23],24],[[]],[[]],[[72,4,4,43,43,4]],[[]],[[],41],[[],41],[[],42],0,0,0,[[]],0,0,0,0,0,0,0,[73,43],0,[[]],[[]],[[[73,[8]]],[[73,[8]]]],[[]],[[],[[73,[1]]]],[73,4],0,[[[73,[19]],73],20],[[73,10],44],[[73,43],44],[[[73,[22]],23],24],[[]],[[]],[73],0,[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[[[74,[8]]],[[74,[8]]]],[[]],[[],74],[[[74,[19]],74],20],[[74,43],44],[[74,10],44],[[[74,[22]],23],24],[[]],[[]],[[[74,[29]],74],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,[[]],[[]],[[]],[[]],[[[75,[8]]],[[75,[8]]]],[[[76,[8]]],[[76,[8]]]],[[]],[[]],[[],[[75,[1]]]],[[],[[76,[1]]]],[75,4],[76,4],0,0,[[[75,[19]],75],20],[[[76,[19]],76],20],[[75,10],[[77,[10]]]],[[75,43],[[77,[43]]]],[[76,43],[[77,[43]]]],[[76,4],[[77,[4]]]],[[76,10],[[77,[10]]]],[[[75,[22]],23],24],[[[76,[22]],23],24],[[]],[[]],[[]],[[]],[[[75,[29]],75],[[31,[30]]]],[[[76,[29]],76],[[31,[30]]]],[75],[76],0,0,[[]],[[]],[[],41],[[],41],[[],41],[[],41],[[],42],[[],42],0,[[]],[[]],[[[78,[8,8]]],[[78,[8,8]]]],[[]],[[[78,[45,45]],78],30],[78],0,[[],[[78,[1,1]]]],[[[78,[19,19]],78],20],[[78,43],44],[[78,10],44],[[[78,[22,22]],23],24],[[]],[[[78,[25,25]]]],[[]],[[[78,[29,29]],78],[[31,[30]]]],[78],0,[[]],[[],41],[[],41],[[],42],0,0,0,0,0,0,0,[[]],[[]],[79,79],[[]],[[],79],[79],[79],[[79,79],20],[[79,23],24],[[79,23],24],[[]],[80,79],[[]],[[]],[[],81],[[],41],[[],41],[[],42],0,[[]],[[]],[44,44],[[]],[[],44],[44],[44],[[44,44],20],[[44,23],24],[[44,23],24],[[]],[4,44],[[]],[[44,44],[[31,[30]]]],[[]],[[],81],[[],41],[[],41],[[],42],0,[[]],[[]],[[[77,[8]]],[[77,[8]]]],[[]],[[],[[77,[1]]]],[77],[77],[[[77,[19]],77],20],[[77,23],24],[[[77,[22]],23],24],[[],77],[82],[[]],[[]],[[]],[[],81],[[],41],[[],41],[[],42],0,[[]],[[]],[83,83],[[]],[[],83],[83],[83],[[83,83],20],[[83,23],24],[[83,23],24],[[]],[43,83],[[]],[[]],[[],81],[[],41],[[],41],[[],42],0,[[]],[[]],[[[84,[8]]],[[84,[8]]]],[[]],[[],[[84,[1]]]],[84],[84],[[[84,[19]],84],20],[[84,23],24],[[[84,[22]],23],24],[[]],[82],[[],84],[[]],[[]],[[],81],[[],41],[[],41],[[],42],0,[[]],[[]],[85,85],[[]],[[],85],[85],[85],[[85,85],20],[[85,23],24],[[85,23],24],[[]],[10,85],[[]],[[]],[[],81],[[],41],[[],41],[[],42],0,0,0,0,[[]],[[]],[86,86],[[]],[[86,86],30],[[],86],[[86,86],20],[[86,4],44],[[86,10],44],[[86,43],44],[[86,23],24],[[]],[86],[[]],[[86,86],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[15,15],[[]],[[15,15],30],[[],15],[[15,15],20],[[15,43],[[77,[43]]]],[[15,10],[[77,[10]]]],[[15,4],[[77,[4]]]],[[15,43],44],[[15,10],44],[[15,4],44],[[15,23],24],[[]],[15],[[]],[[15,15],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[87,87],[[]],[[87,87],30],[[],87],[[87,87],20],[[87,43],44],[[87,10],44],[[87,4],44],[[87,23],24],[[]],[87],[[]],[[87,87],[[31,[30]]]],[[]],[[],41],[[],41],[[],42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[88,4],[[],89],[[],90],[[4,4],88],[[],91],[[],92],[[],93],[[],94],[95,4],[96,4],[94,4],[93,4],[97,4],[92,4],[91,4],[88],[[],97],[88,4],[96,4],[94,4],[93,4],[97,4],[92,4],[91,4],[[],96],0,[[]],[[]],[98,98],[[]],[[],98],[[98,98],20],[[98,43],44],[[98,23],24],[[]],[[]],[[98,98],[[31,[30]]]],[98,4],0,[[]],[[],41],[[],41],[[],42],0,[[]],[[]],[[[99,[8]]],[[99,[8]]]],[[]],[[],[[99,[10]]]],[[],[[99,[43]]]],[[],[[99,[4]]]],[99],0,[[[99,[19]],99],20],[[[99,[10]],10],44],[[[99,[43]],43],44],[[[99,[4]],4],44],[[[99,[22]],23],24],[[]],[[]],[[]],[[],41],[[],41],[[],42]],"p":[[8,"Default"],[3,"Rotate2dOp"],[3,"Operator"],[15,"f32"],[3,"ReflectOp"],[3,"SidedOp"],[3,"TwistOp"],[8,"Clone"],[3,"ConditionalOp"],[3,"Vec2"],[3,"RepeatCountOp"],[3,"AxialReflectOp"],[3,"StretchDistOp"],[3,"TranslateOp"],[3,"EuclideanMetric"],[3,"IsosurfaceOp"],[3,"StretchInfiniteOp"],[3,"DisplaceOp"],[8,"PartialEq"],[15,"bool"],[3,"ElongateOp"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[3,"SmoothUnionOp"],[3,"SmoothSubtractionOp"],[3,"SmoothIntersectionOp"],[8,"PartialOrd"],[4,"Ordering"],[4,"Option"],[3,"RepeatInfiniteOp"],[3,"HollowOp"],[3,"Rotate3dOp"],[3,"Quat"],[3,"ScaleOp"],[3,"UnionOp"],[3,"IntersectionOp"],[3,"SubtractionOp"],[3,"ComposeOp"],[4,"Result"],[3,"TypeId"],[3,"Vec3"],[3,"Distance"],[8,"Ord"],[6,"Compose"],[6,"Onion"],[6,"Transform"],[6,"Conditional"],[6,"Displace"],[6,"Elongate"],[6,"Intersection"],[6,"Isosurface"],[6,"Reflect"],[6,"RepeatCount"],[6,"RepeatInfinite"],[6,"Rotate2d"],[6,"Rotate3d"],[6,"Scale"],[6,"Sided"],[6,"SmoothIntersection"],[6,"SmoothSubtraction"],[6,"SmoothUnion"],[6,"StretchInfinite"],[6,"StretchDist"],[6,"Subtraction"],[6,"Translate"],[6,"Twist"],[6,"Union"],[3,"RaymarchOutput"],[3,"SphereTraceLipschitz"],[3,"SphereTraceNaive"],[3,"Extrude"],[3,"ExtrudeInterior"],[3,"TetrahedronNormals"],[3,"CentralDiffNormals"],[3,"Normal"],[3,"Sweep"],[3,"Color"],[3,"Vec4"],[3,"String"],[15,"never"],[3,"Position"],[3,"Tangent"],[3,"Uv"],[3,"ChebyshevMetric"],[3,"TaxicabMetric"],[6,"NgonMirror"],[6,"Decagon"],[6,"Hexagon"],[6,"Nonagon"],[6,"Octagon"],[6,"Pentagon"],[6,"Quadrilateral"],[6,"Ball"],[6,"Triangle"],[6,"Septagon"],[3,"Octahedron"],[3,"Plane"],[8,"SignedDistanceOperator"],[8,"Raymarch"],[8,"SignedDistanceField"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
